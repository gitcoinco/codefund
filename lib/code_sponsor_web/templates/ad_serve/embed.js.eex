if (!window.hasOwnProperty('_codefund_theme')) {
  window._codefund_theme = '<%= @theme.body |> String.replace("\r", "") |> String.replace("\n", "") %>';
}

if (!window.hasOwnProperty('_codefund_template')) {
  window._codefund_template = '<%= @template.body |> String.replace("\r", "") |> String.replace("\n", "") %>';
}

var _codefund = {
  init: function(config) {
    this.render = this.render.bind(this);
    this.targetId = config.targetId;
    this.jsonUrl = '<%= @details_url %>';
  },

  serve: function() {
    this.loadJSON(this.jsonUrl, this.render);
  },

  render: function(ad) {
    this.addTheme();
    this.insertAd(ad);
  },

  addTheme: function() {
    var css = this.decodeHtml(window._codefund_theme);
    var head = document.getElementsByTagName('head')[0];
    var s = document.createElement('style');
    s.setAttribute('type', 'text/css');
    if (s.styleSheet) { // IE
      s.styleSheet.cssText = css;
    } else {
      s.appendChild(document.createTextNode(css));
    }
    head.appendChild(s);
  },

  insertAd: function (ad) {
    var rawHtml = this.decodeHtml(window._codefund_template);
    var html = this.injectVariableIntoTemplate(rawHtml, ad);
    var el = document.createElement("span");
    el.innerHTML = html;

    const script = document.getElementById(this.targetId);
    if (ad.link === "") {
      console.log('CodeFund does not have a advertiser for you at this time.');
    } else {
      if (script && ad.link !== "") {
        script.appendChild(el);
      } else {
        console.log('CodeFund target does not exist. You must create an element in the DOM with id="' + this.targetId + '"');
      }
    }
  },

  decodeHtml: function (text) {
    var entities = [
      ['amp', '&'],
      ['apos', '\''],
      ['#x27', '\''],
      ['#x2F', '/'],
      ['#39', '\''],
      ['#47', '/'],
      ['lt', '<'],
      ['gt', '>'],
      ['nbsp', ' '],
      ['quot', '"']
    ];

    for (var i = 0, max = entities.length; i < max; ++i)
      text = text.replace(new RegExp('&' + entities[i][0] + ';', 'g'), entities[i][1]);

    return text;
  },

  injectVariableIntoTemplate: function (template, data) {
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        var re = new RegExp('{{' + key + '}}', 'g');
        template = template.replace(re, data[key]);
      }
    }
    return template;
  },

  loadJSON: function(url, callback) {
    var xobj = new XMLHttpRequest();
    xobj.overrideMimeType("application/json");
    xobj.open("GET", url, true);
    xobj.onreadystatechange = () => {
      if (xobj.readyState === 4 && xobj.status === 200) {
        const json = JSON.parse(xobj.responseText);
        callback(json);
      }
    };
    xobj.send(null);
  }
}

_codefund.init({
  targetId: '<%= @targetId %>'
});
_codefund.serve();