var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { test, testGroup, nextFrame } from "../lib/helpers";
import { TestEnvironment } from "../lib/environment";
import { TokenListObserverRecorder } from "../lib/delegate_recorders";
import { TokenListObserver } from "@stimulus/mutation-observers";
testGroup("TokenListObserver", function (hooks) {
    hooks.beforeEach(function () { _this.env = TestEnvironment.setup(TokenListObserver, TokenListObserverRecorder); });
    hooks.afterEach(function () { _this.env.teardown(); });
    test("token matches", function (assert) { return __awaiter(_this, void 0, void 0, function () {
        var done, _a, element, childElement, attributeName, recorder;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    done = assert.async();
                    _a = this.env, element = _a.element, childElement = _a.childElement, attributeName = _a.attributeName, recorder = _a.recorder;
                    element.setAttribute(attributeName, "a");
                    childElement.setAttribute(attributeName, "a");
                    return [4 /*yield*/, nextFrame()];
                case 1:
                    _b.sent();
                    element.setAttribute(attributeName, "a b");
                    childElement.setAttribute(attributeName, "a b");
                    return [4 /*yield*/, nextFrame()];
                case 2:
                    _b.sent();
                    assert.deepEqual(recorder.entries, [
                        { elementMatchedTokenForAttribute: [element, "a", attributeName] },
                        { elementMatchedTokenForAttribute: [childElement, "a", attributeName] },
                        { elementMatchedTokenForAttribute: [element, "b", attributeName] },
                        { elementMatchedTokenForAttribute: [childElement, "b", attributeName] }
                    ]);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    test("token match uniqueness", function (assert) { return __awaiter(_this, void 0, void 0, function () {
        var done, _a, element, childElement, attributeName, recorder;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    done = assert.async();
                    _a = this.env, element = _a.element, childElement = _a.childElement, attributeName = _a.attributeName, recorder = _a.recorder;
                    element.setAttribute(attributeName, "a");
                    childElement.setAttribute(attributeName, "a");
                    return [4 /*yield*/, nextFrame()];
                case 1:
                    _b.sent();
                    element.setAttribute(attributeName, "a a");
                    childElement.setAttribute(attributeName, "a a");
                    return [4 /*yield*/, nextFrame()];
                case 2:
                    _b.sent();
                    assert.deepEqual(recorder.entries, [
                        { elementMatchedTokenForAttribute: [element, "a", attributeName] },
                        { elementMatchedTokenForAttribute: [childElement, "a", attributeName] }
                    ]);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    test("token unmatches", function (assert) { return __awaiter(_this, void 0, void 0, function () {
        var done, _a, element, childElement, attributeName, recorder;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    done = assert.async();
                    _a = this.env, element = _a.element, childElement = _a.childElement, attributeName = _a.attributeName, recorder = _a.recorder;
                    element.setAttribute(attributeName, "a b");
                    childElement.setAttribute(attributeName, "a b");
                    return [4 /*yield*/, nextFrame()];
                case 1:
                    _b.sent();
                    element.setAttribute(attributeName, "a");
                    childElement.setAttribute(attributeName, "a");
                    return [4 /*yield*/, nextFrame()];
                case 2:
                    _b.sent();
                    assert.deepEqual(recorder.entries.slice(-2), [
                        { elementUnmatchedTokenForAttribute: [element, "b", attributeName] },
                        { elementUnmatchedTokenForAttribute: [childElement, "b", attributeName] },
                    ]);
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5fbGlzdF9vYnNlcnZlcl90ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQHN0aW11bHVzL211dGF0aW9uLW9ic2VydmVycy90ZXN0L2Nhc2VzL3Rva2VuX2xpc3Rfb2JzZXJ2ZXJfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGlCQXVFQTtBQXZFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDcEQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDckUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFFaEUsU0FBUyxDQUFDLG1CQUFtQixFQUFFLFVBQUEsS0FBSztJQUNsQyxLQUFLLENBQUMsVUFBVSxDQUFDLGNBQVEsS0FBSSxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLHlCQUF5QixDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMxRyxLQUFLLENBQUMsU0FBUyxDQUFDLGNBQVMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRS9DLElBQUksQ0FBQyxlQUFlLEVBQUUsVUFBTSxNQUFNOzs7OztvQkFDMUIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtvQkFDckIsS0FBcUQsSUFBSSxDQUFDLEdBQUcsRUFBM0QsT0FBTyxhQUFBLEVBQUUsWUFBWSxrQkFBQSxFQUFFLGFBQWEsbUJBQUEsRUFBRSxRQUFRLGNBQUEsQ0FBYTtvQkFFbkUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUE7b0JBQ3hDLFlBQVksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFBO29CQUM3QyxxQkFBTSxTQUFTLEVBQUUsRUFBQTs7b0JBQWpCLFNBQWlCLENBQUE7b0JBRWpCLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUMxQyxZQUFZLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQTtvQkFDL0MscUJBQU0sU0FBUyxFQUFFLEVBQUE7O29CQUFqQixTQUFpQixDQUFBO29CQUVqQixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7d0JBQ2pDLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFFO3dCQUNsRSxFQUFFLCtCQUErQixFQUFFLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsRUFBRTt3QkFDdkUsRUFBRSwrQkFBK0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLEVBQUU7d0JBQ2xFLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFFO3FCQUN4RSxDQUFDLENBQUE7b0JBRUYsSUFBSSxFQUFFLENBQUE7Ozs7U0FDUCxDQUFDLENBQUE7SUFFRixJQUFJLENBQUMsd0JBQXdCLEVBQUUsVUFBTSxNQUFNOzs7OztvQkFDbkMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtvQkFDckIsS0FBcUQsSUFBSSxDQUFDLEdBQUcsRUFBM0QsT0FBTyxhQUFBLEVBQUUsWUFBWSxrQkFBQSxFQUFFLGFBQWEsbUJBQUEsRUFBRSxRQUFRLGNBQUEsQ0FBYTtvQkFFbkUsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUE7b0JBQ3hDLFlBQVksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFBO29CQUM3QyxxQkFBTSxTQUFTLEVBQUUsRUFBQTs7b0JBQWpCLFNBQWlCLENBQUE7b0JBRWpCLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUMxQyxZQUFZLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQTtvQkFDL0MscUJBQU0sU0FBUyxFQUFFLEVBQUE7O29CQUFqQixTQUFpQixDQUFBO29CQUVqQixNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUU7d0JBQ2pDLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUFFO3dCQUNsRSxFQUFFLCtCQUErQixFQUFFLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsRUFBRTtxQkFDeEUsQ0FBQyxDQUFBO29CQUVGLElBQUksRUFBRSxDQUFBOzs7O1NBQ1AsQ0FBQyxDQUFBO0lBRUYsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFVBQU0sTUFBTTs7Ozs7b0JBQzVCLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7b0JBQ3JCLEtBQXFELElBQUksQ0FBQyxHQUFHLEVBQTNELE9BQU8sYUFBQSxFQUFFLFlBQVksa0JBQUEsRUFBRSxhQUFhLG1CQUFBLEVBQUUsUUFBUSxjQUFBLENBQWE7b0JBRW5FLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFBO29CQUMxQyxZQUFZLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQTtvQkFDL0MscUJBQU0sU0FBUyxFQUFFLEVBQUE7O29CQUFqQixTQUFpQixDQUFBO29CQUVqQixPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQTtvQkFDeEMsWUFBWSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUE7b0JBQzdDLHFCQUFNLFNBQVMsRUFBRSxFQUFBOztvQkFBakIsU0FBaUIsQ0FBQTtvQkFFakIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUMzQyxFQUFFLGlDQUFpQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsRUFBRTt3QkFDcEUsRUFBRSxpQ0FBaUMsRUFBRSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLEVBQUU7cUJBQzFFLENBQUMsQ0FBQTtvQkFFRixJQUFJLEVBQUUsQ0FBQTs7OztTQUNQLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIn0=