'use strict';

var pify = require('pify');
var request = pify(require('request'));

var getUserInfo = function (username, hostname) {
  /* eslint-disable complexity */
  if (!hostname) {
    hostname = 'https://gitlab.com';
  }

  return request.get({
    url: `${hostname}/api/v4/users?username=${username}`,
    headers: {
      'User-Agent': 'request'
    }
  }).then(function (res) {
    var body = JSON.parse(res.body);

    // Gitlab returns an array of users. If it is empty, it means the username provided does not exist
    if (!body || body.length === 0) {
      throw new Error(`User ${username} not found`);
    }

    var user = body[0];

    return {
      login: user.username,
      name: user.name || username,
      avatar_url: user.avatar_url,
      profile: user.web_url.startsWith('http') ? user.web_url : `http://${user.web_url}`
    };
  });
};

var getContributors = function (owner, name, hostname) {
  if (!hostname) {
    hostname = 'https://gitlab.com';
  }

  return request.get({
    url: `${hostname}/api/v4/projects?search=${name}`,
    headers: {
      'User-Agent': 'request'
    }
  }).then(function (res) {
    var projects = JSON.parse(res.body);

    // Gitlab returns an array of users. If it is empty, it means the username provided does not exist
    if (!projects || projects.length === 0) {
      throw new Error(`Project ${owner}/${name} not found`);
    }

    var project = null;
    for (var i = 0; i < projects.length; i++) {
      if (projects[i].path_with_namespace === `${owner}/${name}`) {
        project = projects[i];
        break;
      }
    }

    if (!project) {
      throw new Error(`Project ${owner}/${name} not found`);
    }

    return request.get({
      url: `${hostname}/api/v4/projects/${project.id}/repository/contributors`,
      headers: {
        'User-Agent': 'request'
      }
    }).then(function (newRes) {
      var contributors = JSON.parse(newRes.body);
      if (newRes.statusCode >= 400) {
        if (newRes.statusCode === 404) {
          throw new Error('No contributors found on the GitLab repository');
        }
        throw new Error(contributors.message);
      }
      return contributors.map(function (item) {
        return item.name;
      });
    });
  });
};

module.exports = {
  getUserInfo,
  getContributors
};